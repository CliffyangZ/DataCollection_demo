#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
數據收集API服務
提供RESTful API接口，用於控制和監控數據收集過程
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import subprocess
import threading
import time
import json
import os
import logging
import sys
from datetime import datetime, timedelta
import re
import psycopg2
import traceback

app = Flask(__name__)
CORS(app)

# 設置日誌
app.logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
app.logger.addHandler(handler)

# 獲取項目根目錄的絕對路徑
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
app.logger.info(f"項目根目錄: {project_root}")

# 全局變量，用於存儲收集狀態
collection_status = {
    "is_collecting": False,
    "start_time": None,
    "elapsed_time": 0,
    "symbol": "",
    "interval": "",
    "batch_count": 0,
    "total_collected": 0,
    "current_batch": {
        "start_time": "",
        "end_time": "",
        "count": 0,
        "progress": 0
    },
    "estimated_klines": 0,
    "progress_percentage": 0,
    "last_update_time": None,
    "error": None
}

collection_history = []
collection_process = None
monitor_thread = None
stop_monitoring = False

@app.route('/api/exchanges/configs', methods=['GET'])
def get_exchange_configs():
    """獲取所有交易所配置文件"""
    try:
        config_dir = os.path.join(project_root, 'backend', 'api_config')
        app.logger.info(f"Looking for config files in: {config_dir}")
        
        # 檢查config目錄是否存在
        if not os.path.exists(config_dir):
            app.logger.error(f"配置目錄不存在: {config_dir}")
            app.logger.info(f"項目根目錄: {project_root}")
            app.logger.info(f"項目根目錄內容: {os.listdir(project_root)}")
            
            # 嘗試創建配置目錄
            try:
                os.makedirs(config_dir, exist_ok=True)
                app.logger.info(f"已創建配置目錄: {config_dir}")
            except Exception as e:
                app.logger.error(f"創建配置目錄失敗: {str(e)}")
            
            # 回傳空數組和錯誤消息
            return jsonify({
                "configFiles": [],
                "message": "配置目錄不存在，已嘗試創建"
            })
        
        # 列出backend目錄內容以幫助調試
        backend_dir = os.path.join(project_root, 'backend')
        app.logger.info(f"Backend目錄內容: {os.listdir(backend_dir)}")
        app.logger.info(f"Config目錄內容: {os.listdir(config_dir)}")
        
        # 獲取所有JSON文件
        config_files = [f for f in os.listdir(config_dir) if f.endswith('.json')]
        app.logger.info(f"找到的配置文件: {config_files}")
        
        # 優先使用_local.json文件
        local_configs = [f for f in config_files if '_local.json' in f]
        if local_configs:
            app.logger.info(f"找到本地配置文件: {local_configs}")
        
        configs = []
        
        # 如果沒有找到配置文件，返回默認列表
        if not config_files:
            app.logger.warning("未找到配置文件，返回默認列表")
            return jsonify({
                "configFiles": [
                    {
                        "filename": "BingX_api_config2_local.json",
                        "path": os.path.join(config_dir, "BingX_api_config2_local.json"),
                        "exchange": "BingX"
                    },
                    {
                        "filename": "Binance_api_config.json",
                        "path": os.path.join(config_dir, "Binance_api_config.json"),
                        "exchange": "Binance"
                    },
                    {
                        "filename": "OKX_api_config.json",
                        "path": os.path.join(config_dir, "OKX_api_config.json"),
                        "exchange": "OKX"
                    },
                    {
                        "filename": "ByBit_api_config.json",
                        "path": os.path.join(config_dir, "ByBit_api_config.json"),
                        "exchange": "ByBit"
                    }
                ],
                "message": "Using default config list"
            })
        
        # 處理每個文件
        for filename in config_files:
            file_path = os.path.join(config_dir, filename)
            exchange_name = ""
            
            # 從文件名提取交易所名稱
            name_parts = filename.split('_')
            if len(name_parts) > 0:
                exchange_name = name_parts[0]
            
            # 從文件內容中提取交易所名稱
            try:
                with open(file_path, 'r') as file:
                    config_data = json.load(file)
                    
                    # 檢查配置文件格式
                    app.logger.info(f"配置文件 {filename} 頂級鍵: {list(config_data.keys())}")
                    
                    # 從exchange_configs中提取交易所名稱
                    for config in config_data.get('exchange_configs', []):
                        if 'exchange_name' in config:
                            exchange_name = config['exchange_name']
                            app.logger.info(f"從配置文件中提取交易所名稱: {exchange_name}")
                            break
                            
                    # 確保路徑是絕對路徑
                    absolute_path = os.path.abspath(file_path)
                    
                    config_info = {
                        "filename": filename,
                        "path": absolute_path,
                        "exchange": exchange_name
                    }
                    
                    configs.append(config_info)
            except Exception as e:
                app.logger.error(f"讀取配置文件 {filename} 失敗: {str(e)}")
                app.logger.exception(e)
        
        app.logger.info(f"成功讀取 {len(configs)} 個配置文件")
        app.logger.info(f"找到的配置文件: {configs}")
        
        # 將本地配置文件優先顯示
        configs.sort(key=lambda x: 0 if '_local' in x['filename'] else 1)
        
        # 確保至少返回一些備用配置
        if not configs:
            app.logger.warning("未能讀取到有效的配置文件，使用預設備用")
            # 手動創建列表作為備用
            configs = [
                {
                    "filename": "BingX_api_config2_local.json",
                    "path": os.path.join(config_dir, "BingX_api_config2_local.json"),
                    "exchange": "BingX"
                },
                {
                    "filename": "Binance_api_config.json",
                    "path": os.path.join(config_dir, "Binance_api_config.json"),
                    "exchange": "Binance"
                },
                {
                    "filename": "OKX_api_config.json",
                    "path": os.path.join(config_dir, "OKX_api_config.json"),
                    "exchange": "OKX"
                },
                {
                    "filename": "ByBit_api_config.json",
                    "path": os.path.join(config_dir, "ByBit_api_config.json"),
                    "exchange": "ByBit"
                }
            ]
            
        return jsonify({"configFiles": configs})
    except Exception as e:
        app.logger.error(f"獲取交易所配置時出錯: {str(e)}")
        app.logger.error(traceback.format_exc())
        return jsonify({"error": str(e), "configFiles": []}), 500
